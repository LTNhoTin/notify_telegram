import requests
import json
import logging
from typing import Optional

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class OllamaChatbot:
    def __init__(self, base_url: str = "http://localhost:11434", model: str = "gpt-oss:20b"):
        """
        Kh·ªüi t·∫°o chatbot v·ªõi Ollama server
        
        Args:
            base_url: URL c·ªßa Ollama server (m·∫∑c ƒë·ªãnh: http://localhost:11434)
            model: T√™n model s·ª≠ d·ª•ng (m·∫∑c ƒë·ªãnh: gpt-oss:20b)
        """
        self.base_url = base_url.rstrip('/')
        self.model = model
        self.api_url = f"{self.base_url}/api/generate"
        
    def is_server_available(self) -> bool:
        """
        Ki·ªÉm tra xem Ollama server c√≥ ho·∫°t ƒë·ªông kh√¥ng
        """
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=5)
            return response.status_code == 200
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Ollama server: {e}")
            return False
    
    def check_model_exists(self) -> bool:
        """
        Ki·ªÉm tra xem model c√≥ t·ªìn t·∫°i tr√™n server kh√¥ng
        """
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get('models', [])
                model_names = [model.get('name', '') for model in models]
                return any(self.model in name for name in model_names)
            return False
        except Exception as e:
            logger.error(f"L·ªói khi ki·ªÉm tra model: {e}")
            return False
    
    def generate_response(self, message: str, system_prompt: str = None) -> Optional[str]:
        """
        T·∫°o ph·∫£n h·ªìi t·ª´ chatbot
        
        Args:
            message: Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
            system_prompt: Prompt h·ªá th·ªëng (t√πy ch·ªçn)
            
        Returns:
            Ph·∫£n h·ªìi t·ª´ chatbot ho·∫∑c None n·∫øu c√≥ l·ªói
        """
        try:
            # Ki·ªÉm tra server v√† model
            if not self.is_server_available():
                return "‚ùå Ollama server kh√¥ng ho·∫°t ƒë·ªông. Vui l√≤ng ki·ªÉm tra l·∫°i."
            
            if not self.check_model_exists():
                return f"‚ùå Model '{self.model}' kh√¥ng t·ªìn t·∫°i tr√™n server. Vui l√≤ng ki·ªÉm tra l·∫°i."
            
            # Chu·∫©n b·ªã prompt
            if system_prompt:
                full_prompt = f"System: {system_prompt}\n\nUser: {message}\n\nAssistant:"
            else:
                full_prompt = f"User: {message}\n\nAssistant:"
            
            # Chu·∫©n b·ªã payload
            payload = {
                "model": self.model,
                "prompt": full_prompt,
                "stream": False,
                "options": {
                    "temperature": 0.7,
                    "top_p": 0.9,
                    "max_tokens": 2048
                }
            }
            
            # G·ª≠i request
            logger.info(f"G·ª≠i request ƒë·∫øn Ollama v·ªõi model: {self.model}")
            response = requests.post(
                self.api_url,
                json=payload,
                timeout=60,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get('response', '').strip()
            else:
                logger.error(f"L·ªói API: {response.status_code} - {response.text}")
                return f"‚ùå L·ªói t·ª´ server: {response.status_code}"
                
        except requests.exceptions.Timeout:
            logger.error("Timeout khi g·ªçi API")
            return "‚è∞ Timeout - Server ph·∫£n h·ªìi qu√° ch·∫≠m. Vui l√≤ng th·ª≠ l·∫°i."
        except requests.exceptions.ConnectionError:
            logger.error("L·ªói k·∫øt n·ªëi ƒë·∫øn Ollama server")
            return "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Ollama server. Vui l√≤ng ki·ªÉm tra server."
        except Exception as e:
            logger.error(f"L·ªói kh√¥ng mong mu·ªën: {e}")
            return f"‚ùå L·ªói: {str(e)}"
    
    def get_available_models(self) -> list:
        """
        L·∫•y danh s√°ch c√°c model c√≥ s·∫µn
        """
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get('models', [])
                return [model.get('name', '') for model in models]
            return []
        except Exception as e:
            logger.error(f"L·ªói khi l·∫•y danh s√°ch model: {e}")
            return []

# Kh·ªüi t·∫°o chatbot instance
chatbot = OllamaChatbot()

def process_message_external(message: str) -> str:
    """
    H√†m x·ª≠ l√Ω tin nh·∫Øn t·ª´ b√™n ngo√†i (ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi server_bot.py)
    
    Args:
        message: Tin nh·∫Øn c·∫ßn x·ª≠ l√Ω
        
    Returns:
        Ph·∫£n h·ªìi t·ª´ chatbot
    """
    system_prompt = (
        "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† h·ªØu √≠ch. "
        "H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán v√† ch√≠nh x√°c. "
        "B·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát ho·∫∑c ti·∫øng Anh t√πy theo ng√¥n ng·ªØ c·ªßa c√¢u h·ªèi."
    )
    
    response = chatbot.generate_response(message, system_prompt)
    return response or "‚ùå Kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i."

if __name__ == "__main__":
    # Test chatbot
    print("ü§ñ Testing Ollama Chatbot...")
    print(f"Server available: {chatbot.is_server_available()}")
    print(f"Model exists: {chatbot.check_model_exists()}")
    print(f"Available models: {chatbot.get_available_models()}")
    
    # Test message
    test_message = "Xin ch√†o, b·∫°n c√≥ th·ªÉ gi√∫p t√¥i kh√¥ng?"
    response = process_message_external(test_message)
    print(f"Test response: {response}")